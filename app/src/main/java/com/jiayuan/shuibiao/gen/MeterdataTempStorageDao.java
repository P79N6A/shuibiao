package com.jiayuan.shuibiao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jiayuan.shuibiao.entity.MeterdataTempStorage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "METERDATA_TEMP_STORAGE".
*/
public class MeterdataTempStorageDao extends AbstractDao<MeterdataTempStorage, Long> {

    public static final String TABLENAME = "METERDATA_TEMP_STORAGE";

    /**
     * Properties of entity MeterdataTempStorage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanId = new Property(1, String.class, "planId", false, "PLAN_ID");
        public final static Property PlanSubId = new Property(2, String.class, "planSubId", false, "PLAN_SUB_ID");
        public final static Property MeterId = new Property(3, String.class, "meterId", false, "METER_ID");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property WaterMeterId = new Property(5, String.class, "waterMeterId", false, "WATER_METER_ID");
        public final static Property MeterNum = new Property(6, String.class, "meterNum", false, "METER_NUM");
        public final static Property ClockDialPic = new Property(7, String.class, "clockDialPic", false, "CLOCK_DIAL_PIC");
        public final static Property WaterMeterPic = new Property(8, String.class, "waterMeterPic", false, "WATER_METER_PIC");
        public final static Property ScenePic = new Property(9, String.class, "scenePic", false, "SCENE_PIC");
    }


    public MeterdataTempStorageDao(DaoConfig config) {
        super(config);
    }
    
    public MeterdataTempStorageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeterdataTempStorage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(2, planId);
        }
 
        String planSubId = entity.getPlanSubId();
        if (planSubId != null) {
            stmt.bindString(3, planSubId);
        }
 
        String meterId = entity.getMeterId();
        if (meterId != null) {
            stmt.bindString(4, meterId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String waterMeterId = entity.getWaterMeterId();
        if (waterMeterId != null) {
            stmt.bindString(6, waterMeterId);
        }
 
        String meterNum = entity.getMeterNum();
        if (meterNum != null) {
            stmt.bindString(7, meterNum);
        }
 
        String clockDialPic = entity.getClockDialPic();
        if (clockDialPic != null) {
            stmt.bindString(8, clockDialPic);
        }
 
        String waterMeterPic = entity.getWaterMeterPic();
        if (waterMeterPic != null) {
            stmt.bindString(9, waterMeterPic);
        }
 
        String scenePic = entity.getScenePic();
        if (scenePic != null) {
            stmt.bindString(10, scenePic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeterdataTempStorage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String planId = entity.getPlanId();
        if (planId != null) {
            stmt.bindString(2, planId);
        }
 
        String planSubId = entity.getPlanSubId();
        if (planSubId != null) {
            stmt.bindString(3, planSubId);
        }
 
        String meterId = entity.getMeterId();
        if (meterId != null) {
            stmt.bindString(4, meterId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String waterMeterId = entity.getWaterMeterId();
        if (waterMeterId != null) {
            stmt.bindString(6, waterMeterId);
        }
 
        String meterNum = entity.getMeterNum();
        if (meterNum != null) {
            stmt.bindString(7, meterNum);
        }
 
        String clockDialPic = entity.getClockDialPic();
        if (clockDialPic != null) {
            stmt.bindString(8, clockDialPic);
        }
 
        String waterMeterPic = entity.getWaterMeterPic();
        if (waterMeterPic != null) {
            stmt.bindString(9, waterMeterPic);
        }
 
        String scenePic = entity.getScenePic();
        if (scenePic != null) {
            stmt.bindString(10, scenePic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeterdataTempStorage readEntity(Cursor cursor, int offset) {
        MeterdataTempStorage entity = new MeterdataTempStorage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // planId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // planSubId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meterId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // waterMeterId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // meterNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clockDialPic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // waterMeterPic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // scenePic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeterdataTempStorage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlanSubId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeterId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWaterMeterId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMeterNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClockDialPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWaterMeterPic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScenePic(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeterdataTempStorage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeterdataTempStorage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeterdataTempStorage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
