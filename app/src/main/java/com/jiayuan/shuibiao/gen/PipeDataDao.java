package com.jiayuan.shuibiao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jiayuan.shuibiao.entity.PipeData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIPE_DATA".
*/
public class PipeDataDao extends AbstractDao<PipeData, Long> {

    public static final String TABLENAME = "PIPE_DATA";

    /**
     * Properties of entity PipeData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property PipeMaterial = new Property(2, String.class, "pipeMaterial", false, "PIPE_MATERIAL");
        public final static Property LocalityRoad = new Property(3, String.class, "localityRoad", false, "LOCALITY_ROAD");
        public final static Property Installunit = new Property(4, String.class, "installunit", false, "INSTALLUNIT");
        public final static Property ProjectName = new Property(5, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property PipeAddress = new Property(6, String.class, "pipeAddress", false, "PIPE_ADDRESS");
        public final static Property Embedmode = new Property(7, String.class, "embedmode", false, "EMBEDMODE");
        public final static Property AdminName = new Property(8, String.class, "adminName", false, "ADMIN_NAME");
        public final static Property PipeType = new Property(9, String.class, "pipeType", false, "PIPE_TYPE");
        public final static Property Lat = new Property(10, double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(11, double.class, "lon", false, "LON");
        public final static Property Coordinates = new Property(12, String.class, "coordinates", false, "COORDINATES");
    }


    public PipeDataDao(DaoConfig config) {
        super(config);
    }
    
    public PipeDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PipeData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String pipeMaterial = entity.getPipeMaterial();
        if (pipeMaterial != null) {
            stmt.bindString(3, pipeMaterial);
        }
 
        String localityRoad = entity.getLocalityRoad();
        if (localityRoad != null) {
            stmt.bindString(4, localityRoad);
        }
 
        String installunit = entity.getInstallunit();
        if (installunit != null) {
            stmt.bindString(5, installunit);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(6, projectName);
        }
 
        String pipeAddress = entity.getPipeAddress();
        if (pipeAddress != null) {
            stmt.bindString(7, pipeAddress);
        }
 
        String embedmode = entity.getEmbedmode();
        if (embedmode != null) {
            stmt.bindString(8, embedmode);
        }
 
        String adminName = entity.getAdminName();
        if (adminName != null) {
            stmt.bindString(9, adminName);
        }
 
        String pipeType = entity.getPipeType();
        if (pipeType != null) {
            stmt.bindString(10, pipeType);
        }
        stmt.bindDouble(11, entity.getLat());
        stmt.bindDouble(12, entity.getLon());
 
        String coordinates = entity.getCoordinates();
        if (coordinates != null) {
            stmt.bindString(13, coordinates);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PipeData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String pipeMaterial = entity.getPipeMaterial();
        if (pipeMaterial != null) {
            stmt.bindString(3, pipeMaterial);
        }
 
        String localityRoad = entity.getLocalityRoad();
        if (localityRoad != null) {
            stmt.bindString(4, localityRoad);
        }
 
        String installunit = entity.getInstallunit();
        if (installunit != null) {
            stmt.bindString(5, installunit);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(6, projectName);
        }
 
        String pipeAddress = entity.getPipeAddress();
        if (pipeAddress != null) {
            stmt.bindString(7, pipeAddress);
        }
 
        String embedmode = entity.getEmbedmode();
        if (embedmode != null) {
            stmt.bindString(8, embedmode);
        }
 
        String adminName = entity.getAdminName();
        if (adminName != null) {
            stmt.bindString(9, adminName);
        }
 
        String pipeType = entity.getPipeType();
        if (pipeType != null) {
            stmt.bindString(10, pipeType);
        }
        stmt.bindDouble(11, entity.getLat());
        stmt.bindDouble(12, entity.getLon());
 
        String coordinates = entity.getCoordinates();
        if (coordinates != null) {
            stmt.bindString(13, coordinates);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PipeData readEntity(Cursor cursor, int offset) {
        PipeData entity = new PipeData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pipeMaterial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localityRoad
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // installunit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // projectName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pipeAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // embedmode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // adminName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pipeType
            cursor.getDouble(offset + 10), // lat
            cursor.getDouble(offset + 11), // lon
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // coordinates
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PipeData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPipeMaterial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalityRoad(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInstallunit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPipeAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmbedmode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdminName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPipeType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLat(cursor.getDouble(offset + 10));
        entity.setLon(cursor.getDouble(offset + 11));
        entity.setCoordinates(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PipeData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PipeData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PipeData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
